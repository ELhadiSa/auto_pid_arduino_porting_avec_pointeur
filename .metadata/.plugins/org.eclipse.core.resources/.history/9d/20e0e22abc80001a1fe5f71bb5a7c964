/*
******************************************************************************
File:     main.cpp
Info:     Generated by Atollic TrueSTUDIO(R) 9.3.0   2020-04-17

The MIT License (MIT)
Copyright (c) 2019 STMicroelectronics

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

******************************************************************************
*/

/* Includes */
#include <cstdlib>
#include "stm32f3xx.h"
#include "main.h"
#include <PID_v1.h>
#include <PID_AutoTune_v0.h>

/* Private macro */
#define byte int8_t
#define boolean bool
/* Private variables */
TIM_HandleTypeDef htim7;

byte ATuneModeRemember=2;
double input=80, output=50, setpoint=180;
double kp=2,ki=0.5,kd=2;

double kpmodel=1.5, taup=100, theta[50];
double outputStart=5;
double aTuneStep=50, aTuneNoise=1, aTuneStartValue=100;
unsigned int aTuneLookBack=20;

boolean tuning = false;
unsigned long  modelTime, serialTime;

PID myPID(&input, &output, &setpoint,kp,ki,kd, DIRECT);
PID_ATune aTune(&input, &output);
boolean useSimulation = true;

/* Private function prototypes */
unsigned long millis();
void setup();
void loop();
void changeAutoTune();
void AutoTuneHelper(boolean start);
void SerialSend();
void SerialReceive();
void DoModel();
void SystemClock_Config(void);
static void MX_TIM7_Init(void);


/* Private functions */
unsigned long millis(){


	return 0;
}

void setup()
{
  if(useSimulation)
  {
    for(byte i=0;i<50;i++)
    {
      theta[i]=outputStart;
    }
    modelTime = 0;
  }
  //Setup the pid
  myPID.SetMode(AUTOMATIC);

  if(tuning)
  {
    tuning=false;
    changeAutoTune();
    tuning=true;
  }

//  serialTime = 0;
//  Serial.begin(9600);

}

void loop()
{

  unsigned long now = millis();

  if(!useSimulation)
  { //pull the input in from the real world
   // input = analogRead(0);
  }

  if(tuning)
  {
    byte val = (aTune.Runtime());
    if (val!=0)
    {
      tuning = false;
    }
    if(!tuning)
    { //we're done, set the tuning parameters
      kp = aTune.GetKp();
      ki = aTune.GetKi();
      kd = aTune.GetKd();
      myPID.SetTunings(kp,ki,kd);
      AutoTuneHelper(false);
    }
  }
  else myPID.Compute();

  if(useSimulation)
  {
    theta[30]=output;
    if(now>=modelTime)
    {
      modelTime +=100;
      DoModel();
    }
  }
  else
  {
    // analogWrite(0,output);
  }

  //send-receive with processing if it's time
  if(millis()>serialTime)
  {
    SerialReceive();
    SerialSend();
    serialTime+=500;
  }
}

void changeAutoTune()
{
 if(!tuning)
  {
    //Set the output to the desired starting frequency.
    output=aTuneStartValue;
    aTune.SetNoiseBand(aTuneNoise);
    aTune.SetOutputStep(aTuneStep);
    aTune.SetLookbackSec((int)aTuneLookBack);
    AutoTuneHelper(true);
    tuning = true;
  }
  else
  { //cancel autotune
    aTune.Cancel();
    tuning = false;
    AutoTuneHelper(false);
  }
}

void AutoTuneHelper(boolean start)
{
  if(start)
    ATuneModeRemember = myPID.GetMode();
  else
    myPID.SetMode(ATuneModeRemember);
}


void SerialSend()
{
//  Serial.print("setpoint: ");Serial.print(setpoint); Serial.print(" ");
//  Serial.print("input: ");Serial.print(input); Serial.print(" ");
//  Serial.print("output: ");Serial.print(output); Serial.print(" ");
//  if(tuning){
//    Serial.println("tuning mode");
//  } else {
//    Serial.print("kp: ");Serial.print(myPID.GetKp());Serial.print(" ");
//    Serial.print("ki: ");Serial.print(myPID.GetKi());Serial.print(" ");
//    Serial.print("kd: ");Serial.print(myPID.GetKd());Serial.println();
//  }
}

void SerialReceive()
{
//  if(Serial.available())
//  {
//   char b = Serial.read();
//   Serial.flush();
//   if((b=='1' && !tuning) || (b!='1' && tuning))changeAutoTune();
//  }
}

void DoModel()
{
  //cycle the dead time
  for(byte i=0;i<49;i++)
  {
    theta[i] = theta[i+1];
  }
  //compute the input
  input = (kpmodel / taup) *(theta[0]-outputStart) + input*(1-1/taup) + ((float)((rand()%20)-10))/100;

}












/**
**===========================================================================
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{












 setup();


  /* TODO - Add your application code here */
  while (1)
  {
loop();
  }

  return 0;
}


